include("addresses.lua");
include("functions.lua");


-- This function will attempt to automatically find the true addresses
-- from RoM, even if they have moved.
-- Only works on MicroMacro v1.0 or newer.
function findOffsets()
	local staticcharbase, staticmacrobase;

	-- Find the character's static base
	local found = findPatternInProcess(getProc(), getCharUpdatePattern(), getCharUpdateMask(), 0x550000, 0xA0000);
	if( found == 0 ) then
		error("Unable to find static char base pointer in module.", 0);
	end

	staticpattern_char = found;
	staticcharbase = memoryReadInt(getProc(), found + getCharUpdateOffset());

	if( staticcharbase == nil ) then
		error("Found char pattern, but unable to read memory.\n");
	end


	-- Find the macro static base
	local found = findPatternInProcess(getProc(), getMacroUpdatePattern(), getMacroUpdateMask(), 0x6F0000, 0xA0000);
	if( found == 0 ) then
		error("Unable to find static macro base pointer in module.", 0);
	end

	staticpattern_macro = found;
	staticmacrobase = memoryReadInt(getProc(), found + getMacroUpdateOffset());

	if( staticmacrobase == nil ) then
		error("Found macro pattern, but unable to read memory.\n");
	end



	printf("staticcharbase: 0x%X\n", staticcharbase);
	printf("staticmacrobase: 0x%X\n", staticmacrobase);

	addresses.staticbase_char = staticcharbase;
	addresses.staticbase_macro = staticmacrobase;
end

function rewriteAddresses()
	local filename = getExecutionPath() .. "/addresses.lua";
	getProc(); -- Just to make sure we open the process first

	printf("Scanning for updated addresses...\n");
	findOffsets();
	printf("Finished.\n");

	local addresses_new = {};
	for i,v in pairs(addresses) do
		table.insert(addresses_new, {index = i, value = v});
	end

	-- Sort alphabetically by index
	local function addressSort(tab1, tab2)
		if( tab1.index < tab2.index ) then
			return true;
		end

		return false;
	end
	table.sort(addresses_new, addressSort);

	local file = io.open(filename, "w");

	file:write(
		sprintf("-- Auto-generated by update.lua\n") ..
		"addresses = {\n"
	);

	for i,v in pairs(addresses_new) do
		file:write( sprintf("\t%s = 0x%X,\n", v.index, v.value) );
	end

	file:write("}\n");

	file:close();

end
rewriteAddresses();