include("addresses.lua");
include("functions.lua");


-- This function will attempt to automatically find the true addresses
-- from RoM, even if they have moved.
-- Only works on MicroMacro v1.0 or newer.
function findOffsets()
	local staticcharbase, staticmacrobase;

	-- Find the character's static base
	local found = findPatternInProcess(getProc(), getCharUpdatePattern(), getCharUpdateMask(), 0x550000, 0xA0000);
	if( found == 0 ) then
		error("Unable to find static char base pointer in module.", 0);
	end

	charpatternstart_address = found;
	staticcharbase = memoryReadInt(getProc(), found + getCharUpdateOffset());

	if( staticcharbase == nil ) then
		error("Found char pattern, but unable to read memory.\n");
	end


	-- Find the macro static base
	local found = findPatternInProcess(getProc(), getMacroUpdatePattern(), getMacroUpdateMask(), 0x6F0000, 0xA0000);
	if( found == 0 ) then
		error("Unable to find static macro base pointer in module.", 0);
	end

	macropatternstart_address = found;
	staticmacrobase = memoryReadInt(getProc(), found + getMacroUpdateOffset());

	if( staticmacrobase == nil ) then
		error("Found macro pattern, but unable to read memory.\n");
	end



	printf("staticcharbase: 0x%X\n", staticcharbase);
	printf("staticmacrobase: 0x%X\n", staticmacrobase);

	staticcharbase_address = staticcharbase;
	staticmacrobase_address = staticmacrobase;
end

function rewriteAddresses()
	local filename = getExecutionPath() .. "/addresses.lua";
	getProc(); -- Just to make sure we open the process first

	printf("Scanning for updated addresses...\n");
	findOffsets();
	printf("Finished.\n");

	local file = io.open(filename, "w");

	file:write(
		sprintf("-- Auto-generated by update.lua\n") ..
		sprintf("charpatternstart_address = 0x%X;\n", charpatternstart_address) ..
		sprintf("macropatternstart_address = 0x%X;\n\n", macropatternstart_address) ..

		sprintf("staticcharbase_address = 0x%X;\n", staticcharbase_address) ..
		sprintf("staticmacrobase_address = 0x%X;\n", staticmacrobase_address) ..
		"\n" ..
		sprintf("charPtr_offset = 0x%X;\n", charPtr_offset) ..
		sprintf("camPtr_offset = 0x%X;\n", camPtr_offset) ..
		sprintf("mousePtr_offset = 0x%X;\n", mousePtr_offset) ..
		sprintf("pawnId_offset = 0x%X;\n", pawnId_offset) ..
		sprintf("pawnType_offset = 0x%X;\n", pawnType_offset) ..
		sprintf("charX_offset = 0x%X;\n", charX_offset) ..
		sprintf("charY_offset = 0x%X;\n", charY_offset) ..
		sprintf("charZ_offset = 0x%X;\n", charZ_offset) ..
		sprintf("chardirXUVec_offset = 0x%X;\n", chardirXUVec_offset) ..
		sprintf("chardirYUVec_offset = 0x%X;\n", chardirYUVec_offset) ..
		sprintf("charAlive_offset = 0x%X;\n", charAlive_offset) ..
		sprintf("castbar_offset = 0x%X;\n", castbar_offset) ..
		sprintf("charTargetPtr_offset = 0x%X;\n", charTargetPtr_offset) ..
		sprintf("charName_offset = 0x%X;\n", charName_offset) ..
		sprintf("charHP_offset = 0x%X;\n", charHP_offset) ..
		sprintf("charMaxHP_offset = 0x%X;\n", charMaxHP_offset) ..
		sprintf("charMP_offset = 0x%X;\n", charMP_offset) ..
		sprintf("charMaxMP_offset = 0x%X;\n", charMaxMP_offset) ..
		sprintf("charMP2_offset = 0x%X;\n", charMP2_offset) ..
		sprintf("charMaxMP2_offset = 0x%X;\n", charMaxMP2_offset) ..
		sprintf("charClass1_offset = 0x%X;\n", charClass1_offset) ..
		sprintf("charLevel_offset = 0x%X;\n", charLevel_offset) ..
		sprintf("charClass2_offset = 0x%X;\n", charClass2_offset) ..
		sprintf("charLevel2_offset = 0x%X;\n", charLevel2_offset) ..
		sprintf("pawnAttackable_offset = 0x%X;\n", pawnAttackable_offset) ..
		sprintf("inBattle_offset = 0x%X;\n", inBattle_offset) ..
		"\n" ..
		sprintf("camX_offset = 0x%X;\n", camX_offset) ..
		sprintf("camY_offset = 0x%X;\n", camY_offset) ..
		sprintf("camZ_offset = 0x%X;\n", camZ_offset) ..
		sprintf("camXUVec_offset = 0x%X;\n", camXUVec_offset) ..
		sprintf("camYUVec_offset = 0x%X;\n", camYUVec_offset) ..
		sprintf("camZUVec_offset = 0x%X;\n", camZUVec_offset) ..
		"\n" ..
		sprintf("macro1_offset = 0x%X;\n", macro1_offset) ..
		sprintf("macro2_offset = 0x%X;\n", macro2_offset)
	);

	file:close();

end
rewriteAddresses();